{"name": "test_Orange_Hrm_Login_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nStacktrace:\n\tGetHandleVerifier [0x00007FF61F189632+30946]\n\t(No symbol) [0x00007FF61F13E3C9]\n\t(No symbol) [0x00007FF61F036FDA]\n\t(No symbol) [0x00007FF61F075CF5]\n\t(No symbol) [0x00007FF61F0716BC]\n\t(No symbol) [0x00007FF61F06C4FA]\n\t(No symbol) [0x00007FF61F0B78B9]\n\t(No symbol) [0x00007FF61F0B6F20]\n\t(No symbol) [0x00007FF61F0AC813]\n\t(No symbol) [0x00007FF61F07A6E5]\n\t(No symbol) [0x00007FF61F07B021]\n\tGetHandleVerifier [0x00007FF61F2BF83D+1301229]\n\tGetHandleVerifier [0x00007FF61F2CBDB7+1351783]\n\tGetHandleVerifier [0x00007FF61F2C2A03+1313971]\n\tGetHandleVerifier [0x00007FF61F1BDD06+245686]\n\t(No symbol) [0x00007FF61F14758F]\n\t(No symbol) [0x00007FF61F143804]\n\t(No symbol) [0x00007FF61F143992]\n\t(No symbol) [0x00007FF61F13A3EF]\n\tBaseThreadInitThunk [0x00007FF9C2027034+20]\n\tRtlUserThreadStart [0x00007FF9C40026A1+33]", "trace": "request = <SubRequest 'setup' for <Function test_Orange_Hrm_Login_001>>\n\n    @pytest.fixture\n    def setup(request):\n        browser = request.config.getoption(\"--browser\")  # Retrieve the browser option from command line\n        if browser == \"chrome\":  # Check if the selected browser is Chrome\n            print(\"Test Run - Browser Chrome\")\n            driver = webdriver.Chrome()  # Initialize Chrome WebDriver\n        elif browser == \"firefox\":  # Check if the selected browser is Firefox\n            print(\"Test Run - Browser Firefox\")\n            driver = webdriver.Firefox()  # Initialize Firefox WebDriver\n        elif browser == \"edge\":  # Check if the selected browser is Edge\n            print(\"Test Run - Browser Edge\")\n            driver = webdriver.Edge()  # Initialize Edge WebDriver\n        else:  # Default to headless Chrome if no browser is specified or recognized\n            print(\"Test Run - Headless\")\n>           driver = webdriver.Chrome(options=chrome_options)  # Initialize headless Chrome WebDriver\n\nTestCases\\conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000248F7763F10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: DevToolsActivePort f...07FF61F13A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9C2027034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9C40026A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61F189632+30946]\nE       \t(No symbol) [0x00007FF61F13E3C9]\nE       \t(No symbol) [0x00007FF61F036FDA]\nE       \t(No symbol) [0x00007FF61F075CF5]\nE       \t(No symbol) [0x00007FF61F0716BC]\nE       \t(No symbol) [0x00007FF61F06C4FA]\nE       \t(No symbol) [0x00007FF61F0B78B9]\nE       \t(No symbol) [0x00007FF61F0B6F20]\nE       \t(No symbol) [0x00007FF61F0AC813]\nE       \t(No symbol) [0x00007FF61F07A6E5]\nE       \t(No symbol) [0x00007FF61F07B021]\nE       \tGetHandleVerifier [0x00007FF61F2BF83D+1301229]\nE       \tGetHandleVerifier [0x00007FF61F2CBDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF61F2C2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF61F1BDD06+245686]\nE       \t(No symbol) [0x00007FF61F14758F]\nE       \t(No symbol) [0x00007FF61F143804]\nE       \t(No symbol) [0x00007FF61F143992]\nE       \t(No symbol) [0x00007FF61F13A3EF]\nE       \tBaseThreadInitThunk [0x00007FF9C2027034+20]\nE       \tRtlUserThreadStart [0x00007FF9C40026A1+33]\n\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1723537075188, "stop": 1723537075188, "uuid": "07041592-7ad5-4949-985b-0a4f309dadc0", "historyId": "923abf51eac940227b2d1bdf973a0a65", "testCaseId": "923abf51eac940227b2d1bdf973a0a65", "fullName": "TestCases.test_OrangeHRM_Login.Test_Orange_HRM#test_Orange_Hrm_Login_001", "labels": [{"name": "tag", "value": "group1"}, {"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_OrangeHRM_Login"}, {"name": "subSuite", "value": "Test_Orange_HRM"}, {"name": "host", "value": "DESKTOP-16HA8VL"}, {"name": "thread", "value": "14240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_OrangeHRM_Login"}]}